import torch
import numpy as np
# a = [[[1,2,3],1],[[4,2,3],0]]
# b = [1,0]
# c = [ num for num in a if num[1]==0]
# print(c)
# a = np.zeros(10)
# b = np.array([[1,1],[3,3]])
# c = np.array([2,2])
# print(b/c)
# for i in b:
#     a[i]+=1
# print(a)

import torch

# # 创建一个示例数据张量，你需要替换成你的数据
# data = torch.randn(20)  # 这里创建一个包含100个随机数的示例张量

# sorted_data,_ = torch.sort(data)
# print(sorted_data)
# # 计算0.8分位数
# quantile = torch.quantile(data, 0.8)

# print("0.8分位数:", quantile.item())

# x1=np.array([[1,1,1],
#                  [2,2,2]])
# x2=np.array([3,3,3])
# # x1 = x1.unsqueeze(-2) # Make it into a column tensor
# # x2 = x2.unsqueeze(-3) # Make it into a row tensor
# print(x1.shape, x1)
# print(x2.shape, x2)
# print(x1-x2)
# print(x2.shape, x2)
# print(x1-x2)
import matplotlib.pyplot as plt
# plt.style.use('seaborn-whitegrid')
# # 示例数据
# x = [1, 2, 3, 4, 5]
# y = [10, 12, 5, 8, 9]

# # 创建一个新的图形，设置figsize参数以控制图形大小
# plt.figure(figsize=(6, 4))

# # 绘制折线图
# plt.plot(x, y, marker='o', linestyle='-', color='b', label='折线图')

# # 添加标题和标签
# plt.title('示例折线图')
# plt.xlabel('X轴标签')
# plt.ylabel('Y轴标签')


# # 添加图例
# plt.legend()

# # 显示图形
# plt.show()
import numpy as np

# data = np.array([2.4235582e-03, 1.7511849e-05, 1.1241903e-02, 9.0255020e-03, 2.8524594e-03,
#  1.4382450e-06, 5.3777403e-05, 7.4926380e-04, 1.5373620e-03, 1.8465942e-05,
#  5.9316695e-05, 1.7930411e-02, 1.6647235e-02, 5.8349329e-03, 5.9284498e-03,
#  7.1990129e-04, 1.1385490e-02, 2.8369529e-06, 5.4256230e-05, 8.9728320e-04,
#  5.1312242e-04, 7.9912879e-03, 3.0976022e-03, 2.1274322e-05, 3.5080528e-05,
#  1.8055118e-05, 1.8388667e-03, 2.6457580e-03, 1.3394273e-04, 1.2337981e-03,
#  6.1679515e-04, 1.8131682e-03, 5.0812699e-03, 2.1920367e-03, 1.2201454e-03,
#  9.3989115e-04, 1.1466944e-03, 3.3795498e-03, 1.0439338e-02, 6.5329298e-03,
#  3.4052064e-05, 9.9584940e-05, 7.5220203e-05, 2.0996872e-02, 2.7405788e-04,
#  1.8492210e-04, 2.9843643e-02, 6.4556405e-04, 8.6528093e-02, 8.3412949e-10,
#  2.2268338e-09, 1.2588592e-09, 3.3657028e-09, 6.8187106e-10, 1.4716993e-09,
#  4.3988549e-03, 2.3424047e-09, 1.6562581e-09, 1.7172289e-09, 1.9973652e-09,
#  2.4489764e-09, 1.9004585e-09, 1.7435702e-09, 1.2360132e-09, 1.7087703e-09,
#  2.2992348e-09, 3.6966794e-09, 1.8592171e-09, 1.0699382e-09, 2.8412444e-09,
#  1.6146664e-09, 1.3421712e-09, 1.8230215e-09, 2.2987043e-09, 2.1582340e-09,
#  2.4675473e-09, 1.0745695e-09, 1.3311925e-09, 1.0577185e-09, 1.1842568e-09,
#  2.5796436e-09, 2.8329115e-09, 2.1573805e-09, 2.1872397e-09, 1.6475507e-09,
#  1.2575294e-09, 1.5232596e-09, 2.6141029e-04, 1.2061220e-09, 1.9253392e-09,
#  4.0403032e-09, 1.9243607e-09, 2.2537328e-05, 1.1827930e-09, 1.6303213e-09,
#  1.1163848e-09, 3.0816147e-09, 1.8054930e-09, 1.8037750e-09, 2.0867943e-09,
#  1.9280320e-09, 2.9438685e-09, 1.6199754e-09, 8.3855389e-10, 2.2006075e-09,
#  1.9510915e-09, 1.3436121e-09, 1.0801434e-09, 1.0389924e-09, 1.1281712e-09,
#  1.7300830e-09, 1.5997452e-09, 1.8163334e-09, 1.2423508e-09, 2.6707054e-09,
#  1.7829940e-09, 1.7398327e-09, 1.3395856e-09, 1.6453064e-09, 1.7715904e-09,
#  1.1979484e-09, 1.2658127e-09, 1.5149784e-09, 1.1921621e-09, 1.4196024e-09,
#  1.0228204e-09, 7.6261653e-10, 4.0990495e-09, 2.0867533e-03, 1.1726331e-09,
#  1.2940885e-09, 1.1314513e-09, 2.3378224e-09, 2.9557548e-09, 1.9023749e-09,
#  1.7166073e-09, 2.4667675e-09, 2.9226563e-09, 7.4134587e-10, 2.6842506e-09,
#  2.9625957e-09, 1.6340447e-09, 2.7371694e-09, 1.8833497e-09, 8.5812801e-10,
#  1.7376401e-09, 2.1921325e-09, 2.8516256e-09, 2.5278364e-09, 4.8265445e-09,
#  1.7422532e-09, 1.7847668e-09, 1.8658348e-09, 1.4351978e-09, 3.1731222e-09,
#  3.1752072e-09, 1.9279751e-09, 2.4854967e-09, 1.3767719e-09, 1.8301836e-09,
#  1.6944129e-09, 1.7300951e-09, 1.3647272e-09, 1.7951682e-02, 3.7753765e-09,
#  1.9468913e-09, 1.1946275e-09, 2.0838766e-09, 1.3283675e-09, 2.4722300e-02,
#  2.2556028e-06, 1.1567878e-09, 1.3944492e-09, 2.1824933e-09, 1.7216859e-09,
#  2.4907774e-09, 1.3718203e-09, 1.7146573e-09, 1.8864310e-09, 7.1217587e-10,
#  1.7946389e-09, 2.1732336e-09, 1.4320419e-09, 1.1269047e-09, 2.2536262e-05,
#  7.6620257e-05, 1.9767182e-02, 1.6901571e-04, 4.5085267e-06, 1.1270840e-02,
#  1.2742864e-02, 2.2548099e-06, 2.0284358e-05, 3.5830857e-03, 2.2760613e-04,
#  4.5082447e-06, 2.2553227e-06, 5.6339428e-05, 1.7801504e-09, 2.2562178e-06,
#  1.9960213e-02, 1.5069427e-09, 2.9864958e-02, 2.0829203e-02, 1.2846822e-04,
#  3.1182645e-02, 3.8143271e-09, 3.5768524e-09, 6.7615433e-06, 1.3326078e-04,
#  1.6312625e-09, 2.1293426e-02, 1.6000048e-09,])

fig = plt.figure()
ax = fig.add_subplot(111)
ax.plot(np.array([[0,1,2],[3,4,5]]).T, c='red')
ax.plot(np.array([[2,1,4],[6,7,8]]).T, c='black')
ax.set_xlabel('recon error')
ax.set_ylabel('epoch')
plt.savefig('test_draw.png')